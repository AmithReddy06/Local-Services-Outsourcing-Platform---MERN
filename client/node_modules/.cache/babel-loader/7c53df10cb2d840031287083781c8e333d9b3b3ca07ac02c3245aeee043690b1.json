{"ast":null,"code":"var _jsxFileName = \"/home/amit/Documents/Node/projects/urban_clap_new/Local-Services-Outsourcing-Platform---MERN/client/src/components/PaymentPortal.js\",\n  _s = $RefreshSig$();\n// Payment.js\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport Razorpay from 'razorpay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaymentPortal = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate(); // Updated line\n  const [serviceProvider, setServiceProvider] = useState(null);\n  useEffect(() => {\n    const fetchServiceProviderDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/serviceproviders/${location.state.serviceProvider._id}`);\n        setServiceProvider(response.data);\n      } catch (error) {\n        console.error('Error fetching service provider details:', error);\n        // Handle error and redirect to a failure page if needed\n        navigate('/payment-failure');\n      }\n    };\n    fetchServiceProviderDetails();\n  }, [location.state.serviceProvider._id, history]);\n  useEffect(() => {\n    if (serviceProvider) {\n      const options = {\n        key: 'rzp_test_dakXapuZkHuqrE',\n        amount: serviceProvider.cost * 100,\n        currency: 'INR',\n        name: 'Your Company Name',\n        description: 'Service Payment',\n        image: 'https://your-logo-url.png',\n        handler: async response => {\n          try {\n            // Payment success, update availability and navigate to success page\n            await axios.put(`http://localhost:5000/api/serviceproviders/${serviceProvider._id}`, {\n              isAvailable: false\n            });\n\n            // Redirect to a success page or any other route\n            history.push('/payment-success');\n          } catch (error) {\n            console.error('Error updating availability:', error);\n            // Handle error and redirect to a failure page if needed\n            history.push('/payment-failure');\n          }\n        }\n        // ... (unchanged)\n      };\n      const rzp = new Razorpay(options);\n      rzp.open();\n      return () => {\n        // Cleanup logic, if needed\n      };\n    }\n  }, [serviceProvider, history]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Processing Payment...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 10\n  }, this);\n};\n_s(PaymentPortal, \"XUEgZpEPapLirfFO0Xus0PGOEP4=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = PaymentPortal;\nexport default PaymentPortal;\nvar _c;\n$RefreshReg$(_c, \"PaymentPortal\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","axios","Razorpay","jsxDEV","_jsxDEV","PaymentPortal","_s","location","navigate","serviceProvider","setServiceProvider","fetchServiceProviderDetails","response","get","state","_id","data","error","console","history","options","key","amount","cost","currency","name","description","image","handler","put","isAvailable","push","rzp","open","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/amit/Documents/Node/projects/urban_clap_new/Local-Services-Outsourcing-Platform---MERN/client/src/components/PaymentPortal.js"],"sourcesContent":["// Payment.js\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport Razorpay from 'razorpay';\n\nconst PaymentPortal = () => {\n  const location = useLocation();\n  const navigate = useNavigate(); // Updated line\n  const [serviceProvider, setServiceProvider] = useState(null);\n\n  useEffect(() => {\n    const fetchServiceProviderDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/serviceproviders/${location.state.serviceProvider._id}`);\n        setServiceProvider(response.data);\n      } catch (error) {\n        console.error('Error fetching service provider details:', error);\n        // Handle error and redirect to a failure page if needed\n        navigate('/payment-failure');\n      }\n    };\n\n    fetchServiceProviderDetails();\n  }, [location.state.serviceProvider._id, history]);\n\n  useEffect(() => {\n    if (serviceProvider) {\n      const options = {\n        key: 'rzp_test_dakXapuZkHuqrE',\n        amount: serviceProvider.cost * 100,\n        currency: 'INR',\n        name: 'Your Company Name',\n        description: 'Service Payment',\n        image: 'https://your-logo-url.png',\n        handler: async (response) => {\n          try {\n            // Payment success, update availability and navigate to success page\n            await axios.put(`http://localhost:5000/api/serviceproviders/${serviceProvider._id}`, {\n              isAvailable: false,\n            });\n\n            // Redirect to a success page or any other route\n            history.push('/payment-success');\n          } catch (error) {\n            console.error('Error updating availability:', error);\n            // Handle error and redirect to a failure page if needed\n            history.push('/payment-failure');\n          }\n        },\n        // ... (unchanged)\n      };\n\n      const rzp = new Razorpay(options);\n      rzp.open();\n\n      return () => {\n        // Cleanup logic, if needed\n      };\n    }\n  }, [serviceProvider, history]);\n\n  return <div>Processing Payment...</div>;\n};\n\nexport default PaymentPortal;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,QAAQ,GAAGR,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5DD,SAAS,CAAC,MAAM;IACd,MAAMc,2BAA2B,GAAG,MAAAA,CAAA,KAAY;MAC9C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAE,8CAA6CN,QAAQ,CAACO,KAAK,CAACL,eAAe,CAACM,GAAI,EAAC,CAAC;QACpHL,kBAAkB,CAACE,QAAQ,CAACI,IAAI,CAAC;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;QAChE;QACAT,QAAQ,CAAC,kBAAkB,CAAC;MAC9B;IACF,CAAC;IAEDG,2BAA2B,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACJ,QAAQ,CAACO,KAAK,CAACL,eAAe,CAACM,GAAG,EAAEI,OAAO,CAAC,CAAC;EAEjDtB,SAAS,CAAC,MAAM;IACd,IAAIY,eAAe,EAAE;MACnB,MAAMW,OAAO,GAAG;QACdC,GAAG,EAAE,yBAAyB;QAC9BC,MAAM,EAAEb,eAAe,CAACc,IAAI,GAAG,GAAG;QAClCC,QAAQ,EAAE,KAAK;QACfC,IAAI,EAAE,mBAAmB;QACzBC,WAAW,EAAE,iBAAiB;QAC9BC,KAAK,EAAE,2BAA2B;QAClCC,OAAO,EAAE,MAAOhB,QAAQ,IAAK;UAC3B,IAAI;YACF;YACA,MAAMX,KAAK,CAAC4B,GAAG,CAAE,8CAA6CpB,eAAe,CAACM,GAAI,EAAC,EAAE;cACnFe,WAAW,EAAE;YACf,CAAC,CAAC;;YAEF;YACAX,OAAO,CAACY,IAAI,CAAC,kBAAkB,CAAC;UAClC,CAAC,CAAC,OAAOd,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;YACpD;YACAE,OAAO,CAACY,IAAI,CAAC,kBAAkB,CAAC;UAClC;QACF;QACA;MACF,CAAC;MAED,MAAMC,GAAG,GAAG,IAAI9B,QAAQ,CAACkB,OAAO,CAAC;MACjCY,GAAG,CAACC,IAAI,CAAC,CAAC;MAEV,OAAO,MAAM;QACX;MAAA,CACD;IACH;EACF,CAAC,EAAE,CAACxB,eAAe,EAAEU,OAAO,CAAC,CAAC;EAE9B,oBAAOf,OAAA;IAAA8B,QAAA,EAAK;EAAqB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACzC,CAAC;AAAChC,EAAA,CAzDID,aAAa;EAAA,QACAN,WAAW,EACXC,WAAW;AAAA;AAAAuC,EAAA,GAFxBlC,aAAa;AA2DnB,eAAeA,aAAa;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}